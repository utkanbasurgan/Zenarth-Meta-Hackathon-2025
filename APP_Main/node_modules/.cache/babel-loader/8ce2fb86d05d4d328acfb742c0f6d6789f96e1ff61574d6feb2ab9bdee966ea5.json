{"ast":null,"code":"import { API_CONFIG } from '../settings';\nexport class GeminiApiService {\n  constructor() {\n    this.apiKey = API_CONFIG.GEMINI_API_KEY;\n    this.apiUrl = API_CONFIG.GEMINI_API_URL;\n  }\n  async generateFilterCode(userQuery, csvHeaders, sampleData) {\n    try {\n      if (!this.apiKey || this.apiKey === 'your-gemini-api-key-here') {\n        throw new Error('Gemini API key not configured');\n      }\n      const prompt = this.buildPrompt(userQuery, csvHeaders, sampleData);\n      const response = await fetch(`${this.apiUrl}?key=${this.apiKey}`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          contents: [{\n            parts: [{\n              text: prompt\n            }]\n          }],\n          generationConfig: {\n            temperature: 0.1,\n            topK: 32,\n            topP: 1,\n            maxOutputTokens: 2048\n          }\n        })\n      });\n      if (!response.ok) {\n        const errorText = await response.text();\n        console.error('API Error Response:', errorText);\n        throw new Error(`API request failed: ${response.status} ${response.statusText}. Response: ${errorText}`);\n      }\n      const data = await response.json();\n      console.log('API Response:', data);\n      if (!data.candidates || !data.candidates[0] || !data.candidates[0].content) {\n        throw new Error('Invalid response format from Gemini API');\n      }\n      const generatedCode = data.candidates[0].content.parts[0].text;\n      return this.parseGeneratedCode(generatedCode);\n    } catch (error) {\n      console.error('Gemini API Error:', error);\n      throw error;\n    }\n  }\n  buildPrompt(userQuery, csvHeaders, sampleData) {\n    return `You are a data analysis assistant. Given a user query and CSV data structure, generate JavaScript filter/sort code.\n\nCSV Headers: ${JSON.stringify(csvHeaders)}\nSample Data (first 3 rows): ${JSON.stringify(sampleData.slice(0, 3))}\n\nUser Query: \"${userQuery}\"\n\nGenerate JavaScript code that:\n1. Filters or sorts the CSV data based on the user query\n2. Returns the filtered/sorted data\n3. Uses the variable names: csvData (array of arrays), headers (array of strings)\n4. Only return the JavaScript code, no explanations\n5. Handle edge cases like empty data, missing columns, etc.\n\nExample for \"give me the longest email\":\n\\`\\`\\`javascript\n// Find the row with the longest email\nconst emailColumnIndex = headers.findIndex(header => \n  header.toLowerCase().includes('email')\n);\n\nif (emailColumnIndex === -1) {\n  return { error: 'No email column found' };\n}\n\nlet longestEmailRow = null;\nlet maxLength = 0;\n\ncsvData.forEach((row, index) => {\n  if (row[emailColumnIndex] && row[emailColumnIndex].length > maxLength) {\n    maxLength = row[emailColumnIndex].length;\n    longestEmailRow = { row, index };\n  }\n});\n\nreturn longestEmailRow ? [longestEmailRow.row] : [];\n\\`\\`\\`\n\nNow generate code for: \"${userQuery}\"`;\n  }\n  parseGeneratedCode(code) {\n    // Extract JavaScript code from the response\n    const codeMatch = code.match(/```javascript\\n([\\s\\S]*?)\\n```/);\n    if (codeMatch) {\n      return codeMatch[1];\n    }\n\n    // If no code blocks found, return the raw response\n    return code;\n  }\n}\nexport const geminiApi = new GeminiApiService();","map":{"version":3,"names":["API_CONFIG","GeminiApiService","constructor","apiKey","GEMINI_API_KEY","apiUrl","GEMINI_API_URL","generateFilterCode","userQuery","csvHeaders","sampleData","Error","prompt","buildPrompt","response","fetch","method","headers","body","JSON","stringify","contents","parts","text","generationConfig","temperature","topK","topP","maxOutputTokens","ok","errorText","console","error","status","statusText","data","json","log","candidates","content","generatedCode","parseGeneratedCode","slice","code","codeMatch","match","geminiApi"],"sources":["/Users/utkan.basurgan/Main/1. Works Files/4. Sources Works/Neparth-Frameworks Works/Neparth-Reacts Frameworks/src/services/geminiApi.js"],"sourcesContent":["import { API_CONFIG } from '../settings';\n\nexport class GeminiApiService {\n  constructor() {\n    this.apiKey = API_CONFIG.GEMINI_API_KEY;\n    this.apiUrl = API_CONFIG.GEMINI_API_URL;\n  }\n\n  async generateFilterCode(userQuery, csvHeaders, sampleData) {\n    try {\n      if (!this.apiKey || this.apiKey === 'your-gemini-api-key-here') {\n        throw new Error('Gemini API key not configured');\n      }\n\n      const prompt = this.buildPrompt(userQuery, csvHeaders, sampleData);\n      \n      const response = await fetch(`${this.apiUrl}?key=${this.apiKey}`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          contents: [{\n            parts: [{\n              text: prompt\n            }]\n          }],\n          generationConfig: {\n            temperature: 0.1,\n            topK: 32,\n            topP: 1,\n            maxOutputTokens: 2048,\n          }\n        })\n      });\n\n      if (!response.ok) {\n        const errorText = await response.text();\n        console.error('API Error Response:', errorText);\n        throw new Error(`API request failed: ${response.status} ${response.statusText}. Response: ${errorText}`);\n      }\n\n      const data = await response.json();\n      console.log('API Response:', data);\n      \n      if (!data.candidates || !data.candidates[0] || !data.candidates[0].content) {\n        throw new Error('Invalid response format from Gemini API');\n      }\n\n      const generatedCode = data.candidates[0].content.parts[0].text;\n      return this.parseGeneratedCode(generatedCode);\n      \n    } catch (error) {\n      console.error('Gemini API Error:', error);\n      throw error;\n    }\n  }\n\n  buildPrompt(userQuery, csvHeaders, sampleData) {\n    return `You are a data analysis assistant. Given a user query and CSV data structure, generate JavaScript filter/sort code.\n\nCSV Headers: ${JSON.stringify(csvHeaders)}\nSample Data (first 3 rows): ${JSON.stringify(sampleData.slice(0, 3))}\n\nUser Query: \"${userQuery}\"\n\nGenerate JavaScript code that:\n1. Filters or sorts the CSV data based on the user query\n2. Returns the filtered/sorted data\n3. Uses the variable names: csvData (array of arrays), headers (array of strings)\n4. Only return the JavaScript code, no explanations\n5. Handle edge cases like empty data, missing columns, etc.\n\nExample for \"give me the longest email\":\n\\`\\`\\`javascript\n// Find the row with the longest email\nconst emailColumnIndex = headers.findIndex(header => \n  header.toLowerCase().includes('email')\n);\n\nif (emailColumnIndex === -1) {\n  return { error: 'No email column found' };\n}\n\nlet longestEmailRow = null;\nlet maxLength = 0;\n\ncsvData.forEach((row, index) => {\n  if (row[emailColumnIndex] && row[emailColumnIndex].length > maxLength) {\n    maxLength = row[emailColumnIndex].length;\n    longestEmailRow = { row, index };\n  }\n});\n\nreturn longestEmailRow ? [longestEmailRow.row] : [];\n\\`\\`\\`\n\nNow generate code for: \"${userQuery}\"`;\n  }\n\n  parseGeneratedCode(code) {\n    // Extract JavaScript code from the response\n    const codeMatch = code.match(/```javascript\\n([\\s\\S]*?)\\n```/);\n    if (codeMatch) {\n      return codeMatch[1];\n    }\n    \n    // If no code blocks found, return the raw response\n    return code;\n  }\n}\n\nexport const geminiApi = new GeminiApiService();\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}